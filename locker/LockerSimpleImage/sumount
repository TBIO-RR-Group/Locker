#!/usr/bin/env python3

# sumount.py
# Unmount a filesystem that used SSHFS and clean up
# MFR 6/5/2017

import subprocess, argparse

# --- global settings
version = "0.3.0"

# Try to unmount a mounted filesystem
def sumount(mount_point, verbose):
    if verbose: print('Trying to unmount {}...'.format(mount_point))
    try:
        cmds = ['sudo', 'umount', mount_point]
        if verbose: print( "...Executing '{}'".format( ' '.join(cmds) ) )
        cp = subprocess.run(cmds)
        if cp.returncode != 0:
            msg = 'Failed to unmount {}'.format(mount_point)
            if verbose: print('...' + msg)
            return {'success':False, 'msg': msg }
        else:
            if verbose: print('...Successfully unmounted {}'.format(mount_point))
    except Exception as ex:
        msg = "Error {0}".format(str(ex.args[0])).encode("utf-8")
        if verbose: print('...' + msg)
        return {'success':False, 'msg': msg }
    
    msg = 'Unmounted {}'.format(mount_point)
    return {'success':True, 'msg': msg }

# ---
if __name__ == '__main__':
    
    # Help and defaults
    default_mpoint = '/stash'
    help_mpoint    = 'Path to mount point. (Default {})'.format(default_mpoint)
    help_version   = 'Print sumount version'
    
    # Set up command line parser and parse
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--mountpoint", dest="mount_point", default=default_mpoint, help=help_mpoint)
    parser.add_argument("-v", "--verbose",    help="Enable verbose output", action="store_true")
    parser.add_argument("-V", "--version",    dest='version',     default=None,     help=help_version,    action="store_true")
    
    args = parser.parse_args()
    
    # If version requested, print and exit
    if args.version:
        print( 'sumount version {}'.format(version) )
        
    else:
        # Proceed with the hard work
        result = sumount(args.mount_point, args.verbose)
        print( result['msg'] )

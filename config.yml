# Configuration file for Locker and Locker Services

# Manage credential handling settings
credential_settings:
  ## Credential validation
  ## - When running Locker/Locker Services remotely, started containers will be
  ##   protected (only the starting user plus admins can access).
  ##
  ## - This is handled by 2 services pointed to by redirect_url and validate_url.
  ##   Your login credentials (e.g. session cookie, etc.) will be validated at 
  ##   validate_url and if the validation fails you will be redirected to redirect_url
  ##   to login (that then redirects you back to Locker upon successful login).
  ##
  ## - We use SiteMinder inside our company for this, but you can create your own services at 
  ##   redirect_url and validate_url to handle in your own way (also see our repo ldap_jwt_sso)
  redirect_url: "https://auth.example.com/redirect.cgi"
  validate_url: "https://auth.example.com/validate.cgi"

  ## The redirect_url service should take a single param for the url to
  ## redirect to upon successful authentication and that is given here:
  REDIRECT_TARGET_ARGNAME: 'url'

  ## The name of the cookie that holds your SSO session cookie; 
  ## this is sent on calls to redirect_url and validate_url
  SSO_SESSION_COOKIE_NAME: 'SSOSESSION'

# Manage settings for Locker Services
locker_services:
  ## LDAP settings
  LDAP_BASE_SEARCH: "ou=people,o=example.com"
  LDAP_URL: "ldap://ldap.example.com"
  LDAP_ROOT_DN: "o=example.com"
  LDAP_MAIL_ATTR: "mail"
  LDAP_FILTER_UID_NAME: "userid"

  ## Mail host
  MAILHOST: "mailhost.example.com"

  ## Admin username list
  ADMIN_USERNAME: 
    - admin_userid1
    - admin_userid2
    - admin_userid3
    - ...

  ## Admin email alert list
  ADMIN_EMAIL_ALERTS:
    - "joe.shmo@example.com"
  ADMIN_EMAIL_FROM: "joe.shmo@example.com"
  ADMIN_VIEW_DEFAULT: "false"

  ## It is assumed you are running the app under TLS and have an environment variable
  ## set giving the accessing user's user ID, e.g. from SSO, etc. This defines the
  ## name of that environment variable:
  SERVER_USER_ENV_VAR_NAME: HTTP_SSOUSER

  ## This is the location of the start scripts that are automatically generated
  ## when you start the services (by calling gen_start_script)
  START_SCRIPT_LOCATION: "/locker_services/download/start_locker.sh"

  ## AWS params for Locker Services
  SUBNET_ID: "subnet-gce1239"
  SECURITY_GROUP_ID: "sg-32b33a0"
  KEYNAME: "admin_key"
  KEYLOC: "/admin_key.rsa"

  ## The name of the AMI to use to start new EC2 instances 
  ## (the name is used instead of hardcoding an ami ID so
  ##  you will always be using the most recent updated one, 
  ##  e.g. with all most recent security patches, etc.)
  AMI_NAME: "Amazon Linux 2"

  ## The basic user inside EC2 servers started from the above AMI
  AMI_USER: "ec2-user"
  AMI_USER_HOMEDIR: "/home01/ec2-user"

  ## Extra tags that will be added to the tags of started EC2 instances
  ## as key-value pairs.
  ## Example:
  ##    EXTRA_TAGS:
  ##      - Key: "name of key"
  ##        Value: "value associated with key"
  ##      - Key: "name of another key"
  ##        Value: "value for other key"
  EXTRA_TAGS:
    - Key: EnvironmentName
      Value: PRODUCTION
    - Key: ApplicationName
      Value: Locker
    - Key: GroupName
      Value: MyGroup

  ## Network home directory settings
  MOUNT_NETWORK_HOMEDIR_FLAG: True
  NETWORK_HOMEDIR_HOST: "mount.example.com"
  NETWORK_HOMEDIR_HOSTPATH: "/home/__USER__"
  NETWORK_HOMEDIR_MOUNTPATH: "/nethome/__USER__"

  ## The generic username that users will be inside started Locker containers
  ## (e.g. they will SSH in under this username and this will be                                           
  ## what shows e.g. in RStudio terminal if they execute 'whoami')                                                                                                      
  CONTAINER_USER: rr_user

  ## Set to negative number to not cache JSON object for AWS interaction results
  JSON_CACHE_TIMEOUT_SECS: 86400

  ## Directory where to store any JSON cached objects
  JSON_CACHE_DIR: "/tmp"

  ## Javascript function user can (optionally) define to convert IP to hostname,
  ## e.g. if 'hostname -f' in new EC2 doesn't return what is desired and hostname
  ## has predictable pattern based on IP. Must set value for 'hostname' variable and use
  ## value of 'ip' variable for it.
  IP_TO_HOSTNAME_JS: 'hostname = "ipaddress-" + ip.replace(/\./g,"_") + ".example.com";'

# Manage settings for Locker
locker:
  LOCKER_VERSION: "V1.2"

  ## First configure an image registry to go against. You can go against either
  ## a private Docker registry (see https://docs.docker.com/registry/) or AWS ECR

  ## To go against private Docker registry, set values for registryName and repo_name;
  ## set to empty strings if going against ECR.
  registryName: "dockerreg.example.com:443"

  ## Note: set repo_name to None to be able to see and pull all repos from the registry
  repo_name: locker_rr

  ## Set to empty (and useEcrFlag=False) to not go against a registry
  ## and allow pulls from them (just locally stored images will be shown and used))
  registryUrl: "https://dockerreg.example.com:443"

  ## To go against ECR set values for the following four 
  ## (set to empty strings if going against private Docker registry):
  ecr_domain: "7834123451.dkr.ecr.us-east-1.amazonaws.com"
  ecr_registry_id: "7834123451"
  aws_region: "us-east-1"
  ecr_repo_name: locker_rr

  ## Change this to the Locker image at your own Docker registry where the Locker image can be pulled from.
  ## (note that if you already have built it and it is available in your local machine's Docker
  ## then you won't need to pull from this and this is sort of optional in that case).
  locker_image: "dockerreg.example.com:443/locker_rr:locker_devtest"

  ## List usable ports, otherwise use '("ALL")' for all ports above 5000
  ## usable_ports='("10000" "10001" "10002" "10003" "10004" "10005" "10006" "10007" "10008" "10009")'
  usable_ports: '("ALL")'

  ## If true, will go against ECR as image registry, otherwise against the private Docker registry
  useEcrFlag: False

  ## To reduce image size, you can optionally install content to 
  ## an attached network drive (EFS, etc.) or a local host path.
  ## Set imageDriveNetwork to empty value to not mount/use network drive
  ## that contains extra image content (R libraries, etc.).
  ## If admin has copied the offline image content to a shared local path,
  ## specify that in imageDriveLocalPath; otherwise set to empty to not use.
  imageDriveNetwork: "100.32.241.119:/"
  imageDriveLocalPath:

  ## List of admin usernames/LDAP IDs;
  ## these users will be able to access any user's remote Locker and
  ## started containers services, etc. for debugging and help
  locker_admins: 
    - 'admin_userid1'

  ## Configuration of network drives to mount using sshfs:
  ## Format of each record is: [<DESCRIPTIVE_NAME>,<ID>,<HOSTNAME>,<PATH_AT_HOSTNAME>,<CONTAINER_MOUNT_POINT>,<USER_AT_HOSTNAME>,<VPN_OR_CORPORATE_NETWORK_REQUIRED_TO_MOUNT>,<SHOW_MOUNT_OPTION_CHECKBOX>,<MOUNT_OPTION_DEFAULT>]
  ## <DESCRIPTIVE_NAME>: If empty or none, will default to <HOSTNAME>; label of checkbox where user can check to mount or not (e.g. 'mount Stash?')
  ## <ID>: Unique value (among all the sshfsMounts) identifying this record; will be used as the name of the checkbox in the start container form
  ## <HOSTNAME>: remote host from which you want to sshfs mount a directory
  ## <SHOW_MOUNT_OPTION_CHECKBOX>: Set to true value (e.g. 1) to show the "mount <DESCRIPTIVE_NAME>?" checkbox (in templates/start_container_form.html); setting to false value (e.g. 0) hides it. Whether hidden or shown, the checkbox will still be in the page and its value submitted with the form (see <MOUNT_OPTION_DEFAULT> where you can set it default checked or not).
  ## <MOUNT_OPTION_DEFAULT>: Set to empty string to not have the "mount <DESCRIPTIVE_NAME>?" checkbox (in templates/start_container_form.html) checked by default; 'checked' causes it to be checked by default.
  ## <PATH_AT_HOSTNAME>: The path to mount at <HOSTNAME>; note that any occurence of __REMOTE_USER__ will be replaced with <USER_AT_HOSTNAME> and any occurence of __DOCKER_HOST_USER__ will be replaced by the Docker host user and any occurence of __RUNASUSER__ will be replaced with runAsUser (user inside container)
  ## <CONTAINER_MOUNT_POINT>: The path to mount inside the container; note that any occurence of __REMOTE_USER__ will be replaced with <USER_AT_HOSTNAME> and any occurence of __DOCKER_HOST_USER__ will be replaced by the Docker host user and any occurence of __RUNASUSER__ will be replaced with runAsUser (user inside container)
  ## <USER_AT_HOSTNAME>: The remote user at the host where the drive to be mounted is located, __RUNASUSER__ will be replaced by runAsUser and __DOCKER_HOST_USER__ will be replaced by the Docker host machine username --- if empty value or None then default is just the Docker host machine username
  sshfsMounts:
    - DESCRIPTIVE_NAME: 'Mount1'
      ID: 'mount1'
      HOSTNAME: 'mount.example.com'
      PATH_AT_HOSTNAME: '/mount1'
      CONTAINER_MOUNT_POINT: '/mount1'
      USER_AT_HOSTNAME: '__RUNASUSER__'
      VPN_OR_CORPORATE_NETWORK_REQUIRED_TO_MOUNT: True
      SHOW_MOUNT_OPTION_CHECKBOX: 1
      MOUNT_OPTION_DEFAULT: 'checked'
    - DESCRIPTIVE_NAME: 'Home Directory'
      ID: 'homedir'
      HOSTNAME: 'mount.example.com'
      PATH_AT_HOSTNAME: '/home/__REMOTE_USER__'
      CONTAINER_MOUNT_POINT: '/home/rr_user/__REMOTE_USER__'
      USER_AT_HOSTNAME: '__RUNASUSER__'
      VPN_OR_CORPORATE_NETWORK_REQUIRED_TO_MOUNT: True
      SHOW_MOUNT_OPTION_CHECKBOX: 1
      MOUNT_OPTION_DEFAULT: 'checked'

  ## Paths to sshfs/smount from DOCKER_HOST into the Docker container
  ## format of each record is: [<PATH_AT_DOCKER_HOST>,<CONTAINER_MOUNT_POINT>]
  ## sshfsHostMounts = [['/aws-storage/rcecloud','/host_mounts/rcecloud']]
  sshfsHostMounts:
    - PATH_AT_DOCKER_HOST: "/cloud-storage/mycloud"
      CONTAINER_MOUNT_POINT: "/host_mounts/mycloud"

  ## Proxy env var settings that can be set in started containers depending
  ## on values for proxyHandling and checkCorpNetworkVPNServer
  proxies:
    HTTPS_PROXY: 'http://proxy.example.com'
    HTTP_PROXY: 'http://proxy.example.com'
    FTP_PROXY: 'http://proxy.example.com'
    NO_PROXY: '.example.com,178.113.146.111,localhost'
    https_proxy: 'http://proxy.example.com'
    http_proxy: 'http://proxy.example.com'
    ftp_proxy: 'http://proxy.example.com'
    no_proxy: '.example.com,178.113.146.111,localhost'

  ## Certain actions or capabilities (e.g. mounting of specific network drives, etc.)
  ## are only available when you are running Locker on a VPN or organization/corporate
  ## network. So Locker needs a way to determine that, and it does that by pinging a
  ## server that is only reachable if you are on the VPN or organization/corporate network.
  ## This server will be pinged, and if ping returns something (doesn't time out) it
  ## will be assumed you are on a VPN or organization/corporate network.
  checkCorpNetworkVPNServer: 'proxy.example.com'

  ## Takes these possible values: 'set','unset','check';
  ## used for both Locker itself and app (i.e. RStudio, Jupyter, etc.)
  ## containers that Locker starts.
  ## 'set':   Proxy settings from proxies hash are always set, 
  ##          no matter what (after unsetting any pre-existing 
  ##          proxy settings set when the image was built, 
  ##          i.e. as ENV lines)
  ## 'unset': Any proxy settings that had been set in the image
  ##          when it was built (as ENV lines) are unset and no
  ##          new proxy settings are set (so effectively, there 
  ##          will be no proxy settings in the container)
  ## 'check': Proxy settings from proxies hash are set (after 
  ##          unsetting any pre-existing proxy settings set when 
  ##          the image was built, i.e. as ENV lines) if on corporate
  ##          network/VPN as determined by pinging checkCorpNetworkVPNServer
  proxyHandling: 'check'

  ## Your GitHub server (e.g. enterprise GitHub server);
  ## containers will be setup to allow SSH clones and actions against it
  githubUrl: "enterprisegithub.example.com"

  ## The generic username that users will be inside the container 
  ## (e.g. they will SSH in under this username and this will be
  ## what shows (e.g. in RStudio terminal) if they execute 'whoami')
  containerUser: 'rr_user'

  ## The home directory inside the container of containerUser 
  ## (no trailing forward slash please)
  containerUserHomedir: '/home/rr_user'

  ## The network ports to use for the main app and also (optionally,
  ## if started) vscode, for local and remote started containers:
  mainAppContainerPort_local: "8888"
  vscodeContainerPort_local: "8887"
  mainAppContainerPort_remote: "80"
  vscodeContainerPort_remote: "81"

  ## User configuration info is kept in this directory in home dir:
  userConfigDirName: '.locker'

  ## Regexes used to determine which images are runnable by Locker.
  ## - Image names must match one of these regexes.
  ## 
  ## - The images will be displayed on the "images" page in the
  ##   order of these regexes (i.e. image names matching the first
  ##   regex are shown first, then image names matching the second one
  ##   are seconds, etc. until last are image names that don't match
  ##   any of the regexes). 
  ## 
  ## - Pulled images are shown before unpulled images. 
  ## 
  ## - Config values can be interpolated by surrounding
  ##   them in curly brackets.
  ##   For example, 
  ##      if 
  ##        registryName: "myRegistry"
  ##        repo_name: "myRepo"
  ##
  ##      then:
  ##          ^{registryName}/{repo_name}:latest$
  ##
  ##      will result in:
  ##          ^myRegistry/myRepo:latest$
  ##
  ## - This also works for custom-defined yaml variables in this config.
  lockerRunnableImageRegexes:
    - ^{registryName}/({containerUser}|{repo_name}):ExampleImage-\d\d-\d\d
    - ^({containerUser}|{repo_name}):ExampleImage-\d\d-\d\d
    - ({containerUser}|{repo_name}):ExampleOtherFormat[\-|\_]_other

  ## Ignore case when checking the lockerRunnableImageRegexes (True or False)
  lockerRunnableImageRegexesIgnoreCase: True

  ## Regular expression to mark development images.
  ## - Images matching this regular expression will be marked
  ##   as development/test images.
  ## - A warning will be displayed to users that these are not
  ##   ready for production yet.
  lockerRunnableImageDevtestRegex: "__DEVTEST__$"

  ## If user tries to have more than this number of containers
  ## running at same time, they'll be warned
  MAX_RECOMMENDED_RUNNING_CONTAINERS: 2

  ## Display apps (i.e., RStudio, Jupyter, VScode, etc.)
  ## in an iFrame (True), or directly in the browser window (False).
  appsInIframe: True